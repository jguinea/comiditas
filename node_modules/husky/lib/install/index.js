"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const is_ci_1 = require("is-ci");
const path = require("path");
const pkgDir = require("pkg-dir");
const hookScript_1 = require("./hookScript");
const is_1 = require("./is");
const hookList = [
    'applypatch-msg',
    'pre-applypatch',
    'post-applypatch',
    'pre-commit',
    'prepare-commit-msg',
    'commit-msg',
    'post-commit',
    'pre-rebase',
    'post-checkout',
    'post-merge',
    'pre-push',
    'pre-receive',
    'update',
    'post-receive',
    'post-update',
    'push-to-checkout',
    'pre-auto-gc',
    'post-rewrite',
    'sendemail-validate'
];
function writeHook(filename) {
    fs.writeFileSync(filename, hookScript_1.default, 'utf-8');
    fs.chmodSync(filename, parseInt('0755', 8));
}
function createHook(filename) {
    // Get name, used for logging
    const name = path.basename(filename);
    // Check if hook exist
    if (fs.existsSync(filename)) {
        const hook = fs.readFileSync(filename, 'utf-8');
        // Migrate
        if (is_1.isGhooks(hook)) {
            console.log(`migrating existing ghooks script: ${name} `);
            return writeHook(filename);
        }
        // Migrate
        if (is_1.isPreCommit(hook)) {
            console.log(`migrating existing pre-commit script: ${name}`);
            return writeHook(filename);
        }
        // Update
        if (is_1.isHusky(hook)) {
            return writeHook(filename);
        }
        // Skip
        console.log(`skipping existing user hook: ${name}`);
        return;
    }
    // Create hook if it doesn't exist
    writeHook(filename);
}
function createHooks(filenames) {
    filenames.forEach(createHook);
}
function canRemove(filename) {
    if (fs.existsSync(filename)) {
        const data = fs.readFileSync(filename, 'utf-8');
        return is_1.isHusky(data);
    }
    return false;
}
function removeHook(filename) {
    fs.unlinkSync(filename);
}
function removeHooks(filenames) {
    filenames.filter(canRemove).forEach(removeHook);
}
class HuskyError extends Error {
}
exports.HuskyError = HuskyError;
function getHooks(userDir) {
    const gitHooksDir = path.join(userDir, '.git/hooks');
    return hookList.map(hookName => path.join(gitHooksDir, hookName));
}
function getGitDir(huskyModuleDir) {
    const nodeModulesDir = path.join(huskyModuleDir, '..');
    // Search user's package.json starting from node_modules directory
    // Should support pnpm directory hierarchy
    const userPackageDir = pkgDir.sync(nodeModulesDir);
    return path.join(userPackageDir, '.git');
}
function getUserDir(rootDir) {
    return pkgDir.sync(path.join(rootDir, '..'));
}
function checkCI() {
    if (is_ci_1.default) {
        throw new HuskyError('CI detected, skipping Git hooks installation"');
    }
}
function checkUserDir(userDir) {
    if (!fs.existsSync(userDir)) {
        throw new HuskyError("Error: Can't find package.json");
    }
}
function checkGitDir(userDir) {
    if (!fs.existsSync(path.join(userDir, '.git/hooks'))) {
        throw new HuskyError(`Error: Can't find .git directory in ${userDir}`);
    }
}
function checkGitHooksDir(userDir) {
    if (!fs.existsSync(path.join(userDir, '.git/hooks'))) {
        throw new HuskyError(`Error: Can't find .git/hooks directory in ${userDir}`);
    }
}
function install(rootDir) {
    try {
        console.log('husky > setting up git hooks');
        const userDir = getUserDir(rootDir);
        // Checks
        checkCI();
        checkUserDir(userDir);
        checkGitDir(userDir);
        checkGitHooksDir(userDir);
        // Create hooks
        const hooks = getHooks(userDir);
        createHooks(hooks);
    }
    catch (e) {
        if (e instanceof HuskyError) {
            console.log(e.message);
        }
        else {
            throw e;
        }
    }
    console.log(`husky > done`);
}
exports.install = install;
function uninstall(rootDir) {
    try {
        console.log('husky > uninstalling git hooks');
        const userDir = getUserDir(rootDir);
        // Checks
        checkUserDir(userDir);
        checkGitDir(userDir);
        checkGitHooksDir(userDir);
        // Remove hooks
        const hooks = getHooks(userDir);
        removeHooks(hooks);
    }
    catch (e) {
        // Ignore husky errors
        if (!(e instanceof HuskyError)) {
            console.log(e);
        }
    }
    console.log('husky > done');
}
exports.uninstall = uninstall;
