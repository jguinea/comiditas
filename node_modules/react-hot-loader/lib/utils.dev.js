'use strict';

exports.__esModule = true;
exports.areComponentsEqual = exports.hot = exports.getDisplayName = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _AppContainer = require('./AppContainer.dev');

var _AppContainer2 = _interopRequireDefault(_AppContainer);

var _proxies = require('./reconciler/proxies');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getDisplayName = exports.getDisplayName = WrappedComponent => WrappedComponent.displayName || WrappedComponent.name || 'Component';

const copyReactProp = (source, target) => {
  (0, _hoistNonReactStatics2.default)(target, source);
  target.displayName = `HotExported${getDisplayName(source)}`;
  target.WrappedComponent = source;

  target.propTypes = source.contextTypes;
};

const makeHotExport = (sourceModule, getInstances) => {
  const updateInstances = () => {
    getInstances().forEach(inst => inst.forceUpdate());
  };

  const thenUpdateInstances = () => Promise.resolve(true).then(updateInstances);

  if (sourceModule.hot) {
    sourceModule.hot.accept(() => {
      // Mark as self-accepted for Webpack
      // Update instances for Parcel
      thenUpdateInstances();
    });

    // Webpack way
    if (sourceModule.hot.addStatusHandler) {
      if (sourceModule.hot.status() === 'idle') {
        sourceModule.hot.addStatusHandler(status => {
          if (status === 'apply') {
            thenUpdateInstances();
          }
        });
      }
    }
  }
};

const hot = sourceModule => {
  let instances = [];
  makeHotExport(sourceModule, () => instances);
  // TODO: Ensure that all exports from this file are react components.

  return WrappedComponent => {
    class ExportedComponent extends _react.Component {
      componentWillMount() {
        instances.push(this);
      }

      componentWillUnmount() {
        instances = instances.filter(a => a !== this);
      }

      render() {
        return _react2.default.createElement(
          _AppContainer2.default,
          null,
          _react2.default.createElement(WrappedComponent, this.props)
        );
      }
    }

    copyReactProp(WrappedComponent, ExportedComponent);

    return ExportedComponent;
  };
};

const areComponentsEqual = (a, b) => (0, _proxies.getProxyByType)(a) === (0, _proxies.getProxyByType)(b);

exports.hot = hot;
exports.areComponentsEqual = areComponentsEqual;